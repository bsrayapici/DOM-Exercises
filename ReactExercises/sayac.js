
- State hookunu kullanarak bir sayac isimli state oluÅŸturun. Bu state'in baÅŸlangÄ±Ã§ deÄŸeri 0 olsun.
- 'stil' nesnesinde 'color' Ã¶zelliÄŸi sabit olarak "blue" olarak belirlenmiÅŸ. EÄŸer sayÄ± Ã§iftse "royalblue", deÄŸilse "crimson" olacak ÅŸekilde kodu dÃ¼zenle.
- JSX'te bazÄ± statik kodlanmÄ±ÅŸ bilgiler var. Buralarda sÃ¼slÃ¼ paranetezler iÃ§inde JS ifadeleri kullanarak dinamik hale getir. SayÄ± Ã§ift ise ekranda SayÄ±: 0 Ã§ift sayÄ±dÄ±r, tek ise SayÄ±: 1 tek sayÄ±dÄ±r metni gÃ¶rÃ¼necek ÅŸekilde kodu dÃ¼zenle. tek Ã§ift iÃ§in ternary if kullan. 
- YardÄ±mcÄ± fonksiyonlarÄ± yaz. TÄ±klandÄ±ÄŸÄ±nda sayac'Ä± bir artÄ±rmalÄ± veya azaltmalÄ±. Reset'e tÄ±klandÄ±ÄŸÄ±nda state'i sÄ±fÄ±rlamalÄ±.



import { useState } from "react";

export default function App() {
  // ğŸ“Œ 1. `showSpinner` state'i (BaÅŸlangÄ±Ã§: true)
  const [showSpinner, setShowSpinner] = useState(true);

  // ğŸ“Œ 2. Spinner'Ä± aÃ§/kapat fonksiyonu
  const toggleDondurucu = () => {
    setShowSpinner(!showSpinner);
  };

  return (
    <div className="widget-spinner container">
      <h2>Spinner</h2>
      
      {/* ğŸ“Œ EÄŸer `showSpinner` true ise gÃ¶ster, deÄŸilse gizle */}
      {showSpinner && (
        <div id="dondÃ¼rÃ¼cÃ¼" className="spinner">
          --+--
        </div>
      )}

      {/* ğŸ“Œ Butonun metni duruma gÃ¶re deÄŸiÅŸtirildi */}
      <button id="toggleDondurucu" onClick={toggleDondurucu}>
        {showSpinner ? "Gizle" : "GÃ¶ster"}
      </button>
    </div>
  );
}
