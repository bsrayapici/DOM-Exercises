
- State hookunu kullanarak bir sayac isimli state oluÅŸturun. Bu state'in baÅŸlangÄ±Ã§ deÄŸeri 0 olsun.
- 'stil' nesnesinde 'color' Ã¶zelliÄŸi sabit olarak "blue" olarak belirlenmiÅŸ. EÄŸer sayÄ± Ã§iftse "royalblue", deÄŸilse "crimson" olacak ÅŸekilde kodu dÃ¼zenle.
- JSX'te bazÄ± statik kodlanmÄ±ÅŸ bilgiler var. Buralarda sÃ¼slÃ¼ paranetezler iÃ§inde JS ifadeleri kullanarak dinamik hale getir. SayÄ± Ã§ift ise ekranda SayÄ±: 0 Ã§ift sayÄ±dÄ±r, tek ise SayÄ±: 1 tek sayÄ±dÄ±r metni gÃ¶rÃ¼necek ÅŸekilde kodu dÃ¼zenle. tek Ã§ift iÃ§in ternary if kullan. 
- YardÄ±mcÄ± fonksiyonlarÄ± yaz. TÄ±klandÄ±ÄŸÄ±nda sayac'Ä± bir artÄ±rmalÄ± veya azaltmalÄ±. Reset'e tÄ±klandÄ±ÄŸÄ±nda state'i sÄ±fÄ±rlamalÄ±.





import { useState } from "react";

export default function App() {
  // ğŸ“Œ 1. `sayac` state'i (BaÅŸlangÄ±Ã§: 0)
  const [sayac, setSayac] = useState(0);

  // ğŸ“Œ 2. SayacÄ± artÄ±rma fonksiyonu
  const artirici = () => {
    setSayac(sayac + 1);
  };

  // ğŸ“Œ 3. SayacÄ± azaltma fonksiyonu
  const azaltici = () => {
    setSayac(sayac - 1);
  };

  // ğŸ“Œ 4. Resetleme fonksiyonu
  const reset = () => {
    setSayac(0);
  };

  // ğŸ“Œ 5. SayÄ±nÄ±n Ã§ift veya tek olduÄŸuna gÃ¶re renk deÄŸiÅŸimi
  const stil = {
    fontSize: "1.5em",
    marginBottom: "0.3em",
    color: sayac % 2 === 0 ? "royalblue" : "crimson", // Ã‡iftse mavi, tekse kÄ±rmÄ±zÄ±
  };

  return (
    <div className="widget-counter container">
      <h2>SayaÃ§</h2>
      
      {/* ğŸ“Œ SayacÄ±n dinamik deÄŸeri ve rengi */}
      <div id="sayici" style={stil}>
        SayÄ±: {sayac} {sayac % 2 === 0 ? "Ã§ift sayÄ±dÄ±r" : "tek sayÄ±dÄ±r"}
      </div>

      {/* ğŸ“Œ Butonlar */}
      <div>
        <button id="artirici" onClick={artirici}>ArtÄ±rÄ±cÄ±</button>
        <button id="decrement" onClick={azaltici}>AzaltÄ±cÄ±</button>
        <button id="resetCount" onClick={reset}>Reset</button>
      </div>
    </div>
  );
}
